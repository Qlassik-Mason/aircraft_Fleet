VIABLE FLEET SYSTEM 
This project is a REST API to perform CRUD operations on the fleet I.e Aircraft and Flight.

This Project was  Developed in Go 1.21.6 and gin Rest Framework and Gorm which is an object relational mapping Library.
postgres was use for the  back-end technology.


HOW TO RUN THE APP
-Prerequisite - Go version 1.21.6 must be installed and properly setup at the environment variable.

-Make sure the following packages are installed : gorm.io/driver/postgres, github.com/gin-gonic/gin, import "gorm.io/gorm.

-Connection to postgres Data base can be found in the initializers folder.

- You can Change data base connection from  the .env file and as well as port number of the server, currently set to port 3000.

- Tableplus was used to connect and view data base table.

- To automatically compile your code at each modification, here is link :https://github.com/githubnemo/CompileDaemon 

 OPERATIONS 

-The API allows to search Flights by departure airport, arrival airport, departure date, and departure time.
-The search URL are provided as follows. 

-/models/FlightByDepartureAirport/:departure_airport

-/models/FlightByArrivalAirport/:arrival_airport

-/models/FlightByDepartureDate/:departure_date

- /models/FlightByDepartureTime/:departure_time

-/models/FlightByArrivalDate/:arrival_date

-/models/FlightByArrivalTime/:arrival_time 

-/models/ListOfDepartureAirport/:departure_date 

-/models/ListOfInflightAircraft/:departure_date


-The urls can be tested with Post Man, install post man desktop if runing on windows. well personally i use postman to test Web API's


DOCKERIZATION

-Make sure docker is installed on your system before deploying.

-Enable virtualization  and WSL from your system's Bios if running on windows.

-You can install docker desktop or in a vm and run the application.

-Images folder contains the database table and docker container running on port 3000.

-The docker compose file can also be run if you want to run the app image separately from the database image.

-Thanks



MORE OPTIONS FOR SECURITY ASPECT OF THE API USING VPN AND LOAD BALANCERS

- Use of Virtual private network (VPN) can help secure your API from various attacks.

-A load balancer is a component that distributes API request traffic across multiple servers, 

-it improves system responsiveness and reduces failures by preventing overloading of individual resources.

-When a request is made to a service (e.g., a website or video) the load balancer receives the request and decides which server will process and respond to it, 

As it adds a  layer of indirection between the client and server, a load balancer can shield the client from a direct connection to the server. 

-This means that a server may change — or be removed from the farm — and the client won't know or be impacted.

-Some load balancers can handle more complex tasks, such as HTTPS offloading. 

-When doing so, the clients have a secure connection to the load balancer over HTTPS, while the load balancer opens an HTTP connection to the backend server.


USING API GATEWAY FOR TRAFFIC CONTROL

- Caching and rate limiting are easily the two most common traffic control mechanisms a gateway can apply.

- When caching, the gateway gives the API consumer a faster response, while shielding the backend servers from excessive, repetitive load.

- With rate limiting, the gateway can prevent potential overuse or abuse from consumers by reducing the total number of requests a consumer can issue in a certain period of time.

These are a few points that can help secure an API from various attacks and overloading.






